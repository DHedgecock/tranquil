- scope: not.real.placeholder
  settings:
    foreground: $bold-magenta
# # -----------------------------------------------------------------------------
# # JavaScript syntax token styles
# # -----------------------------------------------------------------------------
# #
# # -----------------------------------------------------------------------------
# # Keywords
# # -----------------------------------------------------------------------------
# # 1. Language features like: import, return, if, else
# # 2. `new` keyword
# - scope: keyword.control, keyword.operator.new
#   settings:
#     foreground: $bold-magenta
# # Make operators light gray by default
# - scope: keyword.operator
#   settings:
#     foreground: $foreground
# # Make logical operators light orange, eg ||, ===
# - scope: keyword.operator.logical, keyword.operator.comparison
#   settings:
#     foreground: $yellow
# # -----------------------------------------------------------------------------
# # Variables
# # -----------------------------------------------------------------------------
# # Makes true/false booleans, null, undefined blue
# # - scope: constant.language
# #   settings:
# #     fontStyle: italic
# # Regex, string escape `\`
# - scope: constant.character.escape
#   settings:
#     foreground: $bold-blue
# # Function parameters
# - scope: variable.parameter
#   settings:
#     foreground: $gray300
#     # fontStyle: italic
# # Destructuring assignment variables
# - scope: meta.object-binding-pattern-variable.js variable
#   settings:
#     foreground: $yellow
# # Special treatment for CONSTANT variables and this, variable interpolation matches?
# - scope: variable.other.constant, variable.language.this, variable.interpolation
#   settings:
#     foreground: $magenta
# # -----------------------------------------------------------------------------
# # Objects
# # -----------------------------------------------------------------------------
# # Matches when an object is accessed.
# - scope: variable.other.object
#   settings:
#       foreground: $magenta
# # The accessed property match
# - scope: variable.other.property
#   settings:
#     foreground: $foreground
# # -----------------------------------------------------------------------------
# # Punctuation
# # -----------------------------------------------------------------------------
# # Template string ${}
# - scope: punctuation.definition.template-expression
#   settings:
#     foreground: $yellow
# # -----------------------------------------------------------------------------
# # Whatever 'support' means
# # -----------------------------------------------------------------------------
# # Matches a Class reference when referenced later
# - scope: support.class
#   settings:
#     foreground: $yellow
# # Matches: MODULE, MODULE.EXPORTS
# - scope: support.type.object.module.js
#   settings:
#     foreground: $violet
# # Matches: console.<LOG>
# - scope: support.function
#   settings:
#     foreground: $green
# # -----------------------------------------------------------------------------
# # Entities
# # -----------------------------------------------------------------------------
# # Function names
# - scope: entity.name.function
#   settings:
#     foreground: $green
# # Class extensions: eg extends `Component`
# - scope: entity.other.inherited-class
#   settings:
#     foreground: $magenta
# # YAML keys
# - scope: entity.name.tag.yaml
#   settings:
#     foreground: $yellow

# # -----------------------------------------------------------------------------
# # Meta
# # -----------------------------------------------------------------------------
# # JS Class/Method decorators -> @ punctuation is orange
# - scope: meta.decorator punctuation.decorator
#   settings:
#     foreground: $bold-yellow
# # JS Class/Method decorators -> blue function name
# - scope: meta.decorator variable
#   settings:
#     foreground: $green
